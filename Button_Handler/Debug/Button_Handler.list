
Button_Handler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ec  080002f4  000102f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080002ec  080002ec  000102ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000102f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080002f4  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000001c  080002f4  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000558  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000001df  00000000  00000000  00010874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000080  00000000  00000000  00010a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00010ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000003d8  00000000  00000000  00010b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000270  00000000  00000000  00010f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00011178  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000dc  00000000  00000000  000111f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002d4 	.word	0x080002d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080002d4 	.word	0x080002d4

08000108 <init_GPIOA>:
/* Private macro */
/* Private variables */
/* Private function prototypes */

/* Private functions */
void init_GPIOA(){
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	RCC->AHBENR|=RCC_AHBENR_GPIOAEN;
 800010c:	4b0c      	ldr	r3, [pc, #48]	; (8000140 <init_GPIOA+0x38>)
 800010e:	4a0c      	ldr	r2, [pc, #48]	; (8000140 <init_GPIOA+0x38>)
 8000110:	6952      	ldr	r2, [r2, #20]
 8000112:	2180      	movs	r1, #128	; 0x80
 8000114:	0289      	lsls	r1, r1, #10
 8000116:	430a      	orrs	r2, r1
 8000118:	615a      	str	r2, [r3, #20]
	GPIOA->MODER &= ~GPIO_MODER_MODER0;
 800011a:	2390      	movs	r3, #144	; 0x90
 800011c:	05db      	lsls	r3, r3, #23
 800011e:	2290      	movs	r2, #144	; 0x90
 8000120:	05d2      	lsls	r2, r2, #23
 8000122:	6812      	ldr	r2, [r2, #0]
 8000124:	2103      	movs	r1, #3
 8000126:	438a      	bics	r2, r1
 8000128:	601a      	str	r2, [r3, #0]
	//GPIOA->PUPDR|=GPIO_PUPDR_PUPDR0_0;//подт€жка к плюсу если ее установить то ничего не работает
	GPIOA->PUPDR|=GPIO_PUPDR_PUPDR0_1;//подт€жка к минусу работает так, что когда кнопка разомкнута подт€гиватс€ земл€, когда замкнут подаетс€ единица
 800012a:	2390      	movs	r3, #144	; 0x90
 800012c:	05db      	lsls	r3, r3, #23
 800012e:	2290      	movs	r2, #144	; 0x90
 8000130:	05d2      	lsls	r2, r2, #23
 8000132:	68d2      	ldr	r2, [r2, #12]
 8000134:	2102      	movs	r1, #2
 8000136:	430a      	orrs	r2, r1
 8000138:	60da      	str	r2, [r3, #12]
}
 800013a:	46c0      	nop			; (mov r8, r8)
 800013c:	46bd      	mov	sp, r7
 800013e:	bd80      	pop	{r7, pc}
 8000140:	40021000 	.word	0x40021000

08000144 <init_GPIOC>:

void init_GPIOC(){
 8000144:	b580      	push	{r7, lr}
 8000146:	af00      	add	r7, sp, #0
	RCC->AHBENR|=RCC_AHBENR_GPIOCEN;
 8000148:	4b08      	ldr	r3, [pc, #32]	; (800016c <init_GPIOC+0x28>)
 800014a:	4a08      	ldr	r2, [pc, #32]	; (800016c <init_GPIOC+0x28>)
 800014c:	6952      	ldr	r2, [r2, #20]
 800014e:	2180      	movs	r1, #128	; 0x80
 8000150:	0309      	lsls	r1, r1, #12
 8000152:	430a      	orrs	r2, r1
 8000154:	615a      	str	r2, [r3, #20]
	GPIOC->MODER|=GPIO_MODER_MODER9_0;
 8000156:	4b06      	ldr	r3, [pc, #24]	; (8000170 <init_GPIOC+0x2c>)
 8000158:	4a05      	ldr	r2, [pc, #20]	; (8000170 <init_GPIOC+0x2c>)
 800015a:	6812      	ldr	r2, [r2, #0]
 800015c:	2180      	movs	r1, #128	; 0x80
 800015e:	02c9      	lsls	r1, r1, #11
 8000160:	430a      	orrs	r2, r1
 8000162:	601a      	str	r2, [r3, #0]
}
 8000164:	46c0      	nop			; (mov r8, r8)
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	46c0      	nop			; (mov r8, r8)
 800016c:	40021000 	.word	0x40021000
 8000170:	48000800 	.word	0x48000800

08000174 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0


  /* TODO - Add your application code here */
	init_GPIOA();
 8000178:	f7ff ffc6 	bl	8000108 <init_GPIOA>
	init_GPIOC();
 800017c:	f7ff ffe2 	bl	8000144 <init_GPIOC>
  /* Infinite loop */
  while (1)
  {
	if(GPIOA->IDR & 0x00000001){
 8000180:	2390      	movs	r3, #144	; 0x90
 8000182:	05db      	lsls	r3, r3, #23
 8000184:	691b      	ldr	r3, [r3, #16]
 8000186:	2201      	movs	r2, #1
 8000188:	4013      	ands	r3, r2
 800018a:	d007      	beq.n	800019c <main+0x28>
		GPIOC->BSRR|=GPIO_BSRR_BS_9;
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <main+0x38>)
 800018e:	4a07      	ldr	r2, [pc, #28]	; (80001ac <main+0x38>)
 8000190:	6992      	ldr	r2, [r2, #24]
 8000192:	2180      	movs	r1, #128	; 0x80
 8000194:	0089      	lsls	r1, r1, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	619a      	str	r2, [r3, #24]
 800019a:	e7f1      	b.n	8000180 <main+0xc>
	}
	else{
		GPIOC->BSRR|=GPIO_BSRR_BR_9;
 800019c:	4b03      	ldr	r3, [pc, #12]	; (80001ac <main+0x38>)
 800019e:	4a03      	ldr	r2, [pc, #12]	; (80001ac <main+0x38>)
 80001a0:	6992      	ldr	r2, [r2, #24]
 80001a2:	2180      	movs	r1, #128	; 0x80
 80001a4:	0489      	lsls	r1, r1, #18
 80001a6:	430a      	orrs	r2, r1
 80001a8:	619a      	str	r2, [r3, #24]
	if(GPIOA->IDR & 0x00000001){
 80001aa:	e7e9      	b.n	8000180 <main+0xc>
 80001ac:	48000800 	.word	0x48000800

080001b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001b0:	480d      	ldr	r0, [pc, #52]	; (80001e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80001b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80001b6:	e003      	b.n	80001c0 <LoopCopyDataInit>

080001b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80001b8:	4b0c      	ldr	r3, [pc, #48]	; (80001ec <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80001ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80001bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80001be:	3104      	adds	r1, #4

080001c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80001c0:	480b      	ldr	r0, [pc, #44]	; (80001f0 <LoopForever+0xa>)
  ldr r3, =_edata
 80001c2:	4b0c      	ldr	r3, [pc, #48]	; (80001f4 <LoopForever+0xe>)
  adds r2, r0, r1
 80001c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80001c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80001c8:	d3f6      	bcc.n	80001b8 <CopyDataInit>
  ldr r2, =_sbss
 80001ca:	4a0b      	ldr	r2, [pc, #44]	; (80001f8 <LoopForever+0x12>)
  b LoopFillZerobss
 80001cc:	e002      	b.n	80001d4 <LoopFillZerobss>

080001ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80001ce:	2300      	movs	r3, #0
  str  r3, [r2]
 80001d0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001d2:	3204      	adds	r2, #4

080001d4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <LoopForever+0x16>)
  cmp r2, r3
 80001d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80001d8:	d3f9      	bcc.n	80001ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001da:	f000 f813 	bl	8000204 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80001de:	f000 f855 	bl	800028c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001e2:	f7ff ffc7 	bl	8000174 <main>

080001e6 <LoopForever>:

LoopForever:
    b LoopForever
 80001e6:	e7fe      	b.n	80001e6 <LoopForever>
  ldr   r0, =_estack
 80001e8:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 80001ec:	080002f4 	.word	0x080002f4
  ldr r0, =_sdata
 80001f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80001f4:	20000000 	.word	0x20000000
  ldr r2, =_sbss
 80001f8:	20000000 	.word	0x20000000
  ldr r3, = _ebss
 80001fc:	2000001c 	.word	0x2000001c

08000200 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000200:	e7fe      	b.n	8000200 <ADC1_COMP_IRQHandler>
	...

08000204 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000208:	4b1a      	ldr	r3, [pc, #104]	; (8000274 <SystemInit+0x70>)
 800020a:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <SystemInit+0x70>)
 800020c:	6812      	ldr	r2, [r2, #0]
 800020e:	2101      	movs	r1, #1
 8000210:	430a      	orrs	r2, r1
 8000212:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8000214:	4b17      	ldr	r3, [pc, #92]	; (8000274 <SystemInit+0x70>)
 8000216:	4a17      	ldr	r2, [pc, #92]	; (8000274 <SystemInit+0x70>)
 8000218:	6852      	ldr	r2, [r2, #4]
 800021a:	4917      	ldr	r1, [pc, #92]	; (8000278 <SystemInit+0x74>)
 800021c:	400a      	ands	r2, r1
 800021e:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000220:	4b14      	ldr	r3, [pc, #80]	; (8000274 <SystemInit+0x70>)
 8000222:	4a14      	ldr	r2, [pc, #80]	; (8000274 <SystemInit+0x70>)
 8000224:	6812      	ldr	r2, [r2, #0]
 8000226:	4915      	ldr	r1, [pc, #84]	; (800027c <SystemInit+0x78>)
 8000228:	400a      	ands	r2, r1
 800022a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <SystemInit+0x70>)
 800022e:	4a11      	ldr	r2, [pc, #68]	; (8000274 <SystemInit+0x70>)
 8000230:	6812      	ldr	r2, [r2, #0]
 8000232:	4913      	ldr	r1, [pc, #76]	; (8000280 <SystemInit+0x7c>)
 8000234:	400a      	ands	r2, r1
 8000236:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <SystemInit+0x70>)
 800023a:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <SystemInit+0x70>)
 800023c:	6852      	ldr	r2, [r2, #4]
 800023e:	4911      	ldr	r1, [pc, #68]	; (8000284 <SystemInit+0x80>)
 8000240:	400a      	ands	r2, r1
 8000242:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <SystemInit+0x70>)
 8000246:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <SystemInit+0x70>)
 8000248:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800024a:	210f      	movs	r1, #15
 800024c:	438a      	bics	r2, r1
 800024e:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <SystemInit+0x70>)
 8000252:	4a08      	ldr	r2, [pc, #32]	; (8000274 <SystemInit+0x70>)
 8000254:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <SystemInit+0x84>)
 8000258:	400a      	ands	r2, r1
 800025a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <SystemInit+0x70>)
 800025e:	4a05      	ldr	r2, [pc, #20]	; (8000274 <SystemInit+0x70>)
 8000260:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000262:	2101      	movs	r1, #1
 8000264:	438a      	bics	r2, r1
 8000266:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000268:	4b02      	ldr	r3, [pc, #8]	; (8000274 <SystemInit+0x70>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]

}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40021000 	.word	0x40021000
 8000278:	f8ffb80c 	.word	0xf8ffb80c
 800027c:	fef6ffff 	.word	0xfef6ffff
 8000280:	fffbffff 	.word	0xfffbffff
 8000284:	ffc0ffff 	.word	0xffc0ffff
 8000288:	fffffeac 	.word	0xfffffeac

0800028c <__libc_init_array>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	2600      	movs	r6, #0
 8000290:	4d0c      	ldr	r5, [pc, #48]	; (80002c4 <__libc_init_array+0x38>)
 8000292:	4c0d      	ldr	r4, [pc, #52]	; (80002c8 <__libc_init_array+0x3c>)
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	10a4      	asrs	r4, r4, #2
 8000298:	42a6      	cmp	r6, r4
 800029a:	d109      	bne.n	80002b0 <__libc_init_array+0x24>
 800029c:	2600      	movs	r6, #0
 800029e:	f000 f819 	bl	80002d4 <_init>
 80002a2:	4d0a      	ldr	r5, [pc, #40]	; (80002cc <__libc_init_array+0x40>)
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <__libc_init_array+0x44>)
 80002a6:	1b64      	subs	r4, r4, r5
 80002a8:	10a4      	asrs	r4, r4, #2
 80002aa:	42a6      	cmp	r6, r4
 80002ac:	d105      	bne.n	80002ba <__libc_init_array+0x2e>
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	00b3      	lsls	r3, r6, #2
 80002b2:	58eb      	ldr	r3, [r5, r3]
 80002b4:	4798      	blx	r3
 80002b6:	3601      	adds	r6, #1
 80002b8:	e7ee      	b.n	8000298 <__libc_init_array+0xc>
 80002ba:	00b3      	lsls	r3, r6, #2
 80002bc:	58eb      	ldr	r3, [r5, r3]
 80002be:	4798      	blx	r3
 80002c0:	3601      	adds	r6, #1
 80002c2:	e7f2      	b.n	80002aa <__libc_init_array+0x1e>
 80002c4:	080002ec 	.word	0x080002ec
 80002c8:	080002ec 	.word	0x080002ec
 80002cc:	080002ec 	.word	0x080002ec
 80002d0:	080002f0 	.word	0x080002f0

080002d4 <_init>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr

080002e0 <_fini>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr

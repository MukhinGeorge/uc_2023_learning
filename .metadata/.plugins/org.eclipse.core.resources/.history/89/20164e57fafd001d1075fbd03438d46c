/*
******************************************************************************
File:     main.c
Info:     Generated by Atollic TrueSTUDIO(R) 9.3.0   2023-05-28

The MIT License (MIT)
Copyright (c) 2019 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include "stm32f0xx.h"

/* Private macro */
#define isEnd 1
#define Processing 0;
/* Private variables */
uint8_t arr[2];
uint8_t state=Processing;
/* Private function prototypes */
/* Private functions */
void reConfigPWM(uint8_t duration, uint8_t freq){
	if(state==isEnd){
		TIM3->CR1&=~TIM_CR1_CEN;
		TIM3->PSC=freq;
		TIM3->CCR3=duration*100;
		state=Processing;
		TIM3->CR1|=TIM_CR1_CEN;
	}
	else{
		return;
	}
}
void DMA1_Channel1_IRQHandler(){
	DMA1->IFCR |= DMA_IFCR_CTCIF1;
	GPIOC->ODR ^= GPIO_ODR_9;
	state=isEnd;
}
void init_tim3_pwm_ch3() {
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
	GPIOC->MODER |= GPIO_MODER_MODER8_1;	//Alternative Foo

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
	TIM3->ARR = 2500;
	TIM3->PSC = 2500;
	TIM3->CCR3 = 1250;
	//Enable straight pwm mode
	TIM3->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;	//pwm on
	TIM3->CCER |= TIM_CCER_CC3E;


	TIM3->DIER |= TIM_DIER_UIE;
	NVIC_EnableIRQ(TIM3_IRQn);
	NVIC_SetPriority(TIM3_IRQn, 2);

	TIM3->CR1 |= TIM_CR1_CEN;
}
void init_dma_adc(void){
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
//	DMA1_Channel1->CCR &= ~DMA_CCR_MSIZE;
//	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0;
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
	DMA1_Channel1->CCR &= ~DMA_CCR_DIR;
	DMA1_Channel1->CNDTR = 2;
	DMA1_Channel1->CPAR = (uint32_t) (&(ADC1->DR));
	DMA1_Channel1->CMAR = (uint32_t) (&arr[0]);
	DMA1_Channel1->CCR |= DMA_CCR_TCIE;

	DMA1_Channel1->CCR |= DMA_CCR_EN;


	NVIC_SetPriority(DMA1_Channel1_IRQn, 5);
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}
void ADC_init(){
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
	GPIOA->MODER |= GPIO_MODER_MODER2;//analog function pa2 - second channel of adc
	GPIOC->MODER |= GPIO_MODER_MODER9_0;
	GPIOA->MODER |= GPIO_MODER_MODER6;// analog function pa6 - 6 channel of adc

	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
	RCC->CR2 |= RCC_CR2_HSI14ON;
	ADC1->SMPR |= ADC_SMPR1_SMPR_2;
	ADC1->CHSELR |= ADC_CHSELR_CHSEL2; //2 and 6 channels are ON...
	ADC1->CHSELR |= ADC_CHSELR_CHSEL6;
	init_dma_adc();

	ADC1->CFGR1 |= ADC_CFGR1_DMACFG;
	ADC1->CFGR1 |= ADC_CFGR1_DMAEN;


	ADC1->CFGR1 |= ADC_CFGR1_DISCEN;
	ADC1->CFGR1 |= ADC_CFGR1_EXTEN_0;
	ADC1->CFGR1 |= ADC_CFGR1_EXTSEL_2;

	ADC1->CR |= ADC_CR_ADEN;
	while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY);
	ADC1->CR |= ADC_CR_ADSTART;

}
void tim15_trg0(){
	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
	TIM15->ARR = 4000;
	TIM15->PSC = 200;
	TIM15->CR2 |= TIM_CR2_MMS_1;
	TIM15->CR1 |= TIM_CR1_CEN;
}

/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{


  /* TODO - Add your application code here */
	ADC_init();
	tim15_trg0();
	init_tim3_pwm_ch3();
  /* Infinite loop */
  while (1)
  {
	reConfigPWM(arr[0], arr[1]);
  }
}

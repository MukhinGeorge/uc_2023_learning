/*
******************************************************************************
File:     main.c
Info:     Generated by Atollic TrueSTUDIO(R) 9.3.0   2023-05-14

The MIT License (MIT)
Copyright (c) 2019 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include "stm32f0xx.h"

/* Private macro */
/* Private variables */
/* Private function prototypes */
/* Private functions */
void init_GPIOC(){
	RCC->AHBENR|=RCC_AHBENR_GPIOCEN;
	GPIOC->MODER|=GPIO_MODER_MODER9_0;
}
void TIM1_IRQHandler(void){
	if(TIM1->SR & TIM_SR_UIF){
		TIM1->SR &= ~TIM_SR_UIF;
		GPIOC->BSRR|=GPIO_BSRR_BR_9;
		//for(int i=0; i<500000; i++);???question about delaying by timer
	}
}
void TIM6_IRQHandler(void){
	//Check Update Interrupt Flag (UIF) in State Register (SR) our TIM6
	if(TIM6->SR & TIM_SR_UIF){
		//Reset the bit in SR responsible for UIF
		TIM6->SR &= ~TIM_SR_UIF;
		//Reset the Output Mode of GPIOC
		GPIOC->BSRR|=GPIO_BSRR_BR_9;
		TIM1->CR1|=TIM_CR1_CEN;
		TIM1->CR1|=TIM_CR1_OPM;

	}
}
void TIM6_Init(void){
	//Activate clocking
	RCC->APB1ENR|=RCC_APB1ENR_TIM6EN;
	//Setting Prescaler
	TIM6->PSC=900;
	//Setting Autoreload
	TIM6->ARR=9000;
	//Enable interrupts in the timer enable register
	TIM6->DIER |= TIM_DIER_UIE;
	//Enable interrupts in the interrupt controller register (NVIC - Nested Vectored Interrupt Controller)
	NVIC_EnableIRQ(TIM6_IRQn);
	//Assign priority of interruption (the higher the number, the higher the priority)
	NVIC_SetPriority(TIM6_IRQn, 2);
	//Set the timer mode
	TIM6->CR1 |= TIM_CR1_CEN;

}
void TIM1_Init(void){
	RCC->APB2ENR|=RCC_APB2ENR_TIM1EN;
	//Set internal clocking, APB2 bus. Reset the three least significant bits of the register TIMx_SMCR. TIM1 will be in slave mode to APB2 bus.
	TIM1->SMCR &= ~TIM_SMCR_SMS;
	TIM1->PSC=900;
	TIM1->ARR=15000;
	TIM1->DIER|=TIM_DIER_UIE;
	NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
	NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn,1);
	//Enable One pulse mode



}
/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{


  /* TODO - Add your application code here */
	init_GPIOC();
	TIM6_Init();
	TIM1_Init();

  /* Infinite loop */
  while (1)
  {
	GPIOC->BSRR|=GPIO_BSRR_BS_9;
  }
}
